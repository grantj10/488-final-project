/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "sleep.h"
#include "xparameters.h"
#include "xspi.h"
#include "xspi_l.h"
#include "xil_printf.h"
#include "controller.h"

/************************** Constant Definitions *****************************/

/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */
#define SPI_DEVICE_ID		XPAR_SPI_0_DEVICE_ID

/*
 *  This is the size of the buffer to be transmitted/received in this example.
 */
#define BUFFER_SIZE		2

/*
 * The following constant defines the slave select signal that is used to
 * to select the Flash device on the SPI bus, this signal is typically
 * connected to the chip select of the device.
 */
#define MIC_SPI_SELECT 0x01


/**************************** Type Definitions *******************************/

/*
 * The following data type is used to send and receive data on the SPI
 * interface.
 */
typedef u8 DataBuffer[BUFFER_SIZE];


/***************** Macros (Inline Functions) Definitions *********************/


/************************** Function Prototypes ******************************/

int SpiPolledExample(XSpi *SpiInstancePtr, u16 SpiDeviceId);

/************************** Variable Definitions *****************************/

/*
 * The instances to support the device drivers are global such that the
 * are initialized to zero each time the program runs.
 */
static XSpi  SpiInstance;	 /* The instance of the SPI device */
XSpi* SpiInstancePtr;
/*
 * The following variables are used to read and write to the  Spi device, they
 * are global to avoid having large buffers on the stack.
 */
u8 ReadBuffer[BUFFER_SIZE];

#define BYTE_TO_BINARY_PATTERN "%c%c%c%c%c%c%c%c"
#define BYTE_TO_BINARY(byte)  \
  (byte & 0x80 ? '1' : '0'), \
  (byte & 0x40 ? '1' : '0'), \
  (byte & 0x20 ? '1' : '0'), \
  (byte & 0x10 ? '1' : '0'), \
  (byte & 0x08 ? '1' : '0'), \
  (byte & 0x04 ? '1' : '0'), \
  (byte & 0x02 ? '1' : '0'), \
  (byte & 0x01 ? '1' : '0')

#define MICBUFFSIZE 1024
u16 Mic1Data[MICBUFFSIZE];
u32 Mic1Index = 0;

void Send_Data();
void Read_Mic();

int main()
{
    init_platform();

    print("Setting up axi_quad_spi\n\r");

    {
    	int Status;


    	// TODO: REMOVE, this is just for convenience TEMP
    	SpiInstancePtr = &SpiInstance;

    	XSpi_Config *ConfigPtr;	/* Pointer to Configuration data */

		/*
		 * Initialize the SPI driver so that it is  ready to use.
		 */
		ConfigPtr = XSpi_LookupConfig(SPI_DEVICE_ID);
		if (ConfigPtr == NULL) {
			printf("XSpi_LookupConfig: XST_DEVICE_NOT_FOUND\r\n");
			return XST_DEVICE_NOT_FOUND;
		}

		Status = XSpi_CfgInitialize(SpiInstancePtr, ConfigPtr, ConfigPtr->BaseAddress);
		if (Status != XST_SUCCESS) {
			printf("XSpi_CfgInitialize: XST_FAILURE\r\n");
			return XST_FAILURE;
		}


		/*
		 * Set the Spi device as a master and in loopback mode.
		 */
		Status = XSpi_SetOptions(SpiInstancePtr, XSP_MASTER_OPTION
				| XSP_CLK_ACTIVE_LOW_OPTION
//				| XSP_CLK_PHASE_1_OPTION
				| XSP_MANUAL_SSELECT_OPTION);
		if (Status != XST_SUCCESS) {
			printf("XSpi_SetOptions: XST_FAILURE\r\n");
			return XST_FAILURE;
		}

		/*
		 * Select the Intel Serial Flash device,  so that it can be
		 * read and written using the SPI bus.
		 */
		Status = XSpi_SetSlaveSelect(SpiInstancePtr, MIC_SPI_SELECT);
		if(Status != XST_SUCCESS) {
			printf("XSpi_SetSlaveSelect: XST_FAILURE\r\n");
			return XST_FAILURE;
		}

		/*
		 * Start the SPI driver so that the device is enabled.
		 */
		XSpi_Start(SpiInstancePtr);

		/*
		 * Disable Global interrupt to use polled mode operation
		 */
		XSpi_IntrGlobalDisable(SpiInstancePtr);


		// Loop body
		while(read_sw7()){



			if(read_sw1()){
				Read_Mic();
			}

			if (read_sw2() && Mic1Index >= MICBUFFSIZE){
				Send_Data();
			}
			else if (!read_sw2()){
				Mic1Index = 0;
			}
		}

    }


    cleanup_platform();
    return 0;
}

void Send_Data(){
	printf("Start\r\n");
	for (int i = 0; i < MICBUFFSIZE; ++i) {
		printf("%u\r\n", Mic1Data[i]);
	}
	Mic1Index = 0;
}

void Read_Mic(){
	// Transmit the data.
	for (int i = 0; i < MICBUFFSIZE; ++i) {

		XSpi_Transfer(SpiInstancePtr, ReadBuffer, ReadBuffer, BUFFER_SIZE);

		Mic1Data[Mic1Index++] = (ReadBuffer[1] << 8) | (ReadBuffer[0]);
		usleep(44100);
	}

}
