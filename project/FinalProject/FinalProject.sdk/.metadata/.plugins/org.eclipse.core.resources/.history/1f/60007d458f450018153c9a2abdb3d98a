/*
 * mic3.c
 *
 *  Created on: Apr 21, 2018
 *      Author: drp1
 */

#include "mic3.h"
#include <stdio.h>
#include "xil_printf.h"
int mic_setup(){
	int Status;


	// TODO: REMOVE, this is just for convenience TEMP
	SpiInstancePtr = &SpiInstance;

	XSpi_Config *ConfigPtr;	/* Pointer to Configuration data */

	/*
	 * Initialize the SPI driver so that it is  ready to use.
	 */
	ConfigPtr = XSpi_LookupConfig(SPI_DEVICE_ID);
	if (ConfigPtr == NULL) {
		printf("XSpi_LookupConfig: XST_DEVICE_NOT_FOUND\r\n");
		return XST_DEVICE_NOT_FOUND;
	}

	Status = XSpi_CfgInitialize(SpiInstancePtr, ConfigPtr, ConfigPtr->BaseAddress);
	if (Status != XST_SUCCESS) {
		printf("XSpi_CfgInitialize: XST_FAILURE\r\n");
		return XST_FAILURE;
	}


	/*
	 * Set the Spi device as a master and in loopback mode.
	 */
	Status = XSpi_SetOptions(SpiInstancePtr, XSP_MASTER_OPTION
			| XSP_CLK_ACTIVE_LOW_OPTION
//				| XSP_CLK_PHASE_1_OPTION
			| XSP_MANUAL_SSELECT_OPTION);
	if (Status != XST_SUCCESS) {
		printf("XSpi_SetOptions: XST_FAILURE\r\n");
		return XST_FAILURE;
	}

	/*
	 * Select the Intel Serial Flash device,  so that it can be
	 * read and written using the SPI bus.
	 */
	Status = XSpi_SetSlaveSelect(SpiInstancePtr, MIC_SPI_SELECT);
	if(Status != XST_SUCCESS) {
		printf("XSpi_SetSlaveSelect: XST_FAILURE\r\n");
		return XST_FAILURE;
	}

	/*
	 * Start the SPI driver so that the device is enabled.
	 */
	XSpi_Start(SpiInstancePtr);

	/*
	 * Disable Global interrupt to use polled mode operation
	 */
	XSpi_IntrGlobalDisable(SpiInstancePtr);
}

void Send_Data(){
//	usleep(1000000);
	printf("Start\r\n");
	for (int i = 0; i < MICBUFFSIZE; i++) {
		printf("%u\r\n", Mic1Data[i]);
	}
	printf("End\r\n");
//	usleep(1000000);
}

void Read_Mic(){
	// Transmit the data.
	for (int i = 0; i < MICBUFFSIZE; i++) {
		XSpi_Transfer(SpiInstancePtr, ReadBuffer, ReadBuffer, BUFFER_SIZE);

		Mic1Data[i] = (ReadBuffer[1] << 8) | (ReadBuffer[0]);
//		printf("[%i]: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\n", i, BYTE_TO_BINARY(ReadBuffer[1]), BYTE_TO_BINARY(ReadBuffer[0]));
//		printf("%u\r\n", Mic1Data[i]);

		// Sleep for one period of the sample rate.
		usleep((1000000/SAMPLERATE));
	}
}

void Send_Data_Bytes(){
		printf("Start\r\n");
		for (int i = 0; i < MICBUFFSIZE; i++) {
			printf("%04x\r\n", Mic1Data[i]);
		}
		printf("End\r\n");
	//	usleep(1000000);
}

